Clean Architecture  MA-VMV:     https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
 Mostly server(host) side:
   [M]  Model (Entities) 		- pure data with methods for changing it  
   [A]  Aspect (Use Cases)		- business logic that act on many models to provide service  
 
 client-server transport & sync
 
 Mostly client side
   [VM] ViewModel (Presenters)	- logic coupled to view that prepare data for view, update view, get input from view 
   [V]  View (Frameworks) 		- view layer that do actual visualisation of model using data state transformed by ViewModel


CUPID for joyful coding          https://dannorth.net/2022/02/10/cupid-for-joyful-coding/

Composable: 		Does the class/method/function have any dependencies that aren't strictly necessary? If so, how can we remove them, or externalise them and make them optional?
					Does the code have a small, opinionated interface or API? If not, how can we reduce its surface area?

Unix philosophy:    Does each part of the code do one and only one thing, and is it obvious what it doesn't do, and what the edge cases are? If it is doing too much, can we see where to introduce a seam and break things up?

Predictable: 	    Is it obvious what this code does, even if it doesn't have any tests or code examples? (And if it doesn't, let's write some characterisation tests to get a feel for how it works.)
					Does it have suitable instrumentation? (If we don't have a standard for this in the team, this is a good time to start those conversations, too.)

Idiomatic: 		    Is this how someone familiar with this technology would write this code? Are we finding it difficult to read, because someone has been "writing Java in Python", or using unnecessarily clever Scala tricks, or solving everything with C++ or Rust macros when simple object composition would be fine?

Domain-based:	    Is it using the language of the business domain, or is it using maps, strings, tuples, even tri-state booleans, to represent domain concepts? Can we introduce types or change the names of variables to make it more intention-revealing?
					Is all the code together that belongs together semantically, or are all the models in one big bag, and the views in another, because that's what the framework authors decided they like?

More of the Unix philosophy was implied not by what these elders said but by what they did and the example Unix itself set. 
Looking at the whole, we can abstract the following ideas:

Rule of Modularity:		Write simple parts connected by clean interfaces.
Rule of Clarity:		Clarity is better than cleverness.
Rule of Composition:	Design programs to be connected to other programs.
Rule of Separation:		Separate policy from mechanism; separate interfaces from engines.
Rule of Simplicity:		Design for simplicity; add complexity only where you must.
Rule of Parsimony:		Write a big program only when it is clear by demonstration that nothing else will do.
Rule of Transparency:	Design for visibility to make inspection and debugging easier.
Rule of Robustness:		Robustness is the child of transparency and simplicity.
Rule of Representation:	Fold knowledge into data so program logic can be stupid and robust.
Rule of Least Surprise:	In interface design, always do the least surprising thing.
Rule of Silence:		When a program has nothing surprising to say, it should say nothing.
Rule of Repair:			When you must fail, fail noisily and as soon as possible.
Rule of Economy:		Programmer time is expensive; conserve it in preference to machine time.
Rule of Generation:		Avoid hand-hacking; write programs to write programs when you can.
Rule of Optimization:	Prototype before polishing. Get it working before you optimize it.
Rule of Diversity:		Distrust all claims for "one true way".
Rule of Extensibility:	Design for the future, because it will be here sooner than you think.